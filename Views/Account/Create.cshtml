@model Dashboard.Models.CreateUserViewModel

@{
	ViewBag.Title = "Создание пользователя";
}

<h2>Создание пользователя</h2>


@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<h4>@Html.LabelFor(model => model)</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownListFor(model => model.Role, (IEnumerable<SelectListItem>)ViewBag.Roles, new { @class = "form-control" })
				@*@Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })*@
				@Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
			</div>
		</div>


		<div class="form-group">
			@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
			</div>
		</div>
        
	    <div class="form-group">
	        @Html.LabelFor(model => model.IsSubsidiary, htmlAttributes: new { @class = "control-label col-md-2" })
	        <div class="col-md-10">
	            @*@Html.CheckBoxFor(model => model.IsSubsidiary, new { @class = "form-control" })*@
	            @Html.CheckBoxFor(model => model.IsSubsidiary)
	            @Html.ValidationMessageFor(model => model.IsSubsidiary, "", new { @class = "text-danger" })
	        </div>
	    </div>
               
	    <div class="form-group">
            @Html.LabelFor(model => model.MainUserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MainUserName, (IEnumerable<SelectListItem>)ViewBag.UserNames, new { @class = "form-control MainUserName" })
                @Html.ValidationMessageFor(model => model.MainUserName, "", new { @class = "text-danger" })
            </div>
        </div>
        
        
	    <div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Создать" class="btn btn-primary" />
			</div>
		</div>
	</div>
}

<div>
	@Html.ActionLink("Назад", "UsersList")
</div>


<script>

    disableForm(true);

    $('#IsSubsidiary').change(function() {

        disableForm(!this.checked);

    });

    function disableForm(isDisabled) {
        $(".MainUserName").prop('disabled', isDisabled);
    }

</script>

@section Scripts {
	@Scripts.Render(
        Dashboard.Bundles.jquery.jqueryval.Scripts.Key
    )
}
