@using Dashboard.DB.Models.ModelExt
@using PagedList
@using Dashboard.DB.Models.TaskPlanner
@using Dashboard.Models

@{
    ViewBag.Title = "Задачи";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*@Styles.Render(Dashboard.Bundles.TasksEditor.Css.Key)*@

@Styles.Render(
        Dashboard.Bundles.Kendo.kendo.Css.Key,
        Dashboard.Bundles.BootstrapTagsInput.Css.Key,
        Dashboard.Bundles.FilterControl.Css.Key,
        Dashboard.Bundles.Tooltipster.Css.Key)

<link href="~/Content/font-awesome.css" rel="stylesheet"/>

<link href="~/Content/Tasks/TasksEditor.css" rel="stylesheet" />
<style>
    #taskList {
        width: auto;
        margin: 0px;
        border: none;
        overflow: scroll;

     }   

    #taskPostsTape {
        max-width: 290px;
        width: 290px;
        border: none;
        margin: 0px;
    }
</style>

<h2>Планировщик задач</h2>

@Html.Partial("CreateTaskPostModalWindow")

<div id="filters">
    <table class="filter-table">
        <tr>
            <td class="filter-name">
                <label class="control-label">Назначил:</label>
            </td>
            <td class="filter-control">
                @Html.DropDownList("taskFilterEmployeeFrom_id", null, htmlAttributes: new { @class = "form-control" })
            </td>
        </tr>
            <tr>
                <td class="filter-name">
                    <label class="control-label">Исполняет:</label>
                </td>
                <td class="filter-control">
                    @Html.DropDownList("taskFilterEmployeeTo_id", null, htmlAttributes: new { @class = "form-control" })
                </td>
            </tr>
@*        <tr>*@
@*            <td class="filter-name">*@
@*                <label class="control-label">Контакт:</label>*@
@*            </td>*@
@*            <td class="filter-control">*@
@*$1$                @Html.Partial("~/Views/Shared/EntityGetter.cshtml", new GetterControlModel#1#*@
@*$1$                {#1#*@
@*$1$                    ControlID = "taskFilterContact",#1#*@
@*$1$                    onlySearch = true,#1#*@
@*$1$                    controllerName = "Contacts",#1#*@
@*$1$                    methodName = "GetContactsByList"#1#*@
@*$1$                })#1#*@
@*            </td>*@
@*        </tr>*@
    </table>
</div>


<table class="tast-editor-table">
    <tr>
        <td>
            <div class="clearfix">
                <div class="left">
                    @Html.DropDownList("taskFilters", null, htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.Partial("CreateTaskModalWindow")
                @if (ViewBag.IsEmployee)
                {
                    <div class="right">
                        <a onclick=" openAddTaskModal() " class="btn btn-primary" href="#">Создать задачу</a>
                    </div>
                }
            </div>
        </td>
        <td></td>
    </tr>
    
        
    
</table>
<div>
    
    <div id="taskList">
        @Html.Partial("TaskList", (IPagedList<TaskViewModel>)ViewBag.Tasks)
    </div>
    <div id="taskPostsTape" class="tast-posts"></div>
</div>

@Scripts.Render(
        Dashboard.Bundles.Kendo.kendo.Scripts.Key,
        Dashboard.Bundles.Kendo.kendoHelp.Scripts.Key,

        Dashboard.Bundles.Extentions.Scripts.Key,
        Dashboard.Bundles.bootstrapplugins.Scripts.Key,
        Dashboard.Bundles.UserSetting.Scripts.Key,

        Dashboard.Bundles.Reports.ReportHelper.Scripts.Key,

        Dashboard.Bundles.Helpers.Scripts.Key,
        Dashboard.Bundles.PrMonthAlert.Scripts.Key,

        Dashboard.Bundles.Tooltipster.Scripts.Key,
        Dashboard.Bundles.Underscore.Scripts.Key
        )
@*@Scripts.Render("~/bundles/kendoTasks") *@
@*<script src="~/Scripts/kendo/kendoExt/selectRowGrid.js"></script>*@
<script src="~/Scripts/kendo/kendoExt/TasksKendoFunction.js"></script>
<script src='~/Scripts/TaskPlaner/TaskPlannerModalManager.js'></script>

<script>
    $(function () {
        initTaskFiltersChangeHandler();
    });

    function getTaskPostsFromServer(task_id) {
        if (isNaN(task_id)) {
            return;
        }

        $.ajax({
            url: basePath + 'Tasks/GetTaskPosts',
            async: true,
            type: 'POST',
            data: {
                task_id: task_id
            },
            success: function (data) {
                initTaskTapeFromData(data);
            }
        });
    }

    function initTaskTapeFromData(data) {
        $('#taskPostsTape').html(data);
    }

    function initTaskFiltersChangeHandler() {
        $('#taskFilters').change(function () {
            updateKendoGridAndClearPosts();
        });

        $('#taskFilterEmployeeFrom_id').change(function () {
            updateKendoGridAndClearPosts();
        });

        $('#taskFilterEmployeeTo_id').change(function () {
            updateKendoGridAndClearPosts();
        });

        $('#taskFilterContact').change(function () {
            updateKendoGridAndClearPosts();
        });
    }

    function updateKendoGridAndClearPosts() {
        kendoGridDataBind();
        clearTaskPostsTape();
    }

    function kendoGridDataBind(taskId) {
        var dataSource = $('#Grid')
            .data('kendoGrid')
            .dataSource;

        $('#Grid').data('kendoGrid')
            .dataSource
            .read({ id: taskId });

    }

    function clearTaskPostsTape() {
        $('#taskPostsTape').html('');
    }

    function openAddTaskModal() {
        var filters = {
            EmployeeTo: $('#taskFilterEmployeeTo_id').val(),
            Contact: $('#taskFilterContact').val(),
            ContactId: $('#taskFilterContact_hidden').val()
        };

        CreateTaskModalManager
            .getInstance()
            .openModal(
                function(taskId) {
                    kendoGridDataBind(taskId);
                    /*$('#Grid').data('kendoGrid')
                    .dataSource
                    .page = 3;*/

                    /*kendoGrid.onDataBound(function() {
                    kendoGrid.unBindDataBoundEvent();
                });*/
                    //SelectTask(taskId, GoToTaskPage);
                    //$('#Grid').data('kendoGrid').dataSource.page=3;
                    kendoGridSetSelectedRow(taskId);
                    ShowTaskPosts(taskId);


                    /*setTimeout(function() {
                    SelectTask(taskId, GoToTaskPage);

                    setTimeout(function() {
                        kendoGridSetSelectedRow(taskId);
                    }, 500);

                }, 100);*/

                },
                filters
            );
    }

    function goToErrorPage() {
        window.location.replace(basePath + 'Shared/Error');
    }

    function getConfiguration() {

        kendoGrid.onDataBinding(function () {
            kendoGrid.resetTask();
        });

        var contactId = -1;
        includeOnce('bundles/LayoutAsync'
//            ,
//            function() {
//                contactId = EntityGetterController.GetInstance('taskFilterContact').getEntityId();
//            }
            );

        return {
            EmployeeFrom: $('#taskFilterEmployeeFrom_id').val(),
            EmployeeTo: $('#taskFilterEmployeeTo_id').val(),
            TaskStateFilter: $('#taskFilters').val(),
            Contact: contactId
        };
    }
</script>
